#!/bin/bash
#author       : Debroux LÃ©onard : leonard.debroux@gmail.com 
#description  : Outputs an html version of the diff 
#                     of the two files in arg
#date         : 31/08/2013
#===========================================================

# Constant declaration
orig=$1
new=$2
name=
if [[ $# = 3 ]]; then
  name=$3
else
  name=$2
fi

aColor="#AAFFAA"
cColor="#AAAAFF"
dColor="#FFAAAA"
noCol="#FFFFFF"
black="#000000"
current=0
nodiff=1

# Result of the diff of the two files
RES=$(diff $orig $new)

# echoes a part of a file from a begining lines to an ending line
# $1 : the file
# $2 : the line where the block begins
# $3 : the line where the bloch ends
# $4 : the color of the cell
function getBlock {
  f=$1
  start=$2
  end=$3
  color=$4
  block=$(sed -n "${start},${end}p" < $f)
  echo -n "<td bgcolor=$color>"
  while read -r line; do
    echo "$line<br/>"
  done <<< "$block"
  echo -n "</td>"
}

# Checks if some content in the original file wasn't change and 
#   echoes if in a white cell
# $1 : where a new different block of lines begins
# $1 : where that different block ends
# $3 : the type of change (addition, change or deletion)
function unchangedContent {
  sep=$3
  if [[ $sep = "a" ]]; then
    s=$(($1 + 1))
  else
    s=$1
  fi
  e=$2
  if [[ $(($current + 2)) = $s ]]; then
    unchanged=$(sed -n "$(($current + 1))p" < $orig)
    echo -n "<td>$unchanged</td>"
    echo "<td>$unchanged</td></tr>"
  elif [[ $(($current + 2)) -lt $s ]]; then
    getBlock $orig $(($current + 1)) $(($s - 1)) $noCol
    getBlock $orig $(($current + 1)) $(($s - 1)) $noCol
    echo "</tr>"
  fi
  if [[ "$sep" -ne "e" ]]; then
    echo -n "<tr>"
  fi
  let current=$e
}

# Given some line(s) indices and a type of changes, 
#   echoes that original content
# $1 : the line(s) indices (can be # or #,#)
# $2 : the type of change (addition, change or deletion)
function origFileContent {
  p1=$1
  sep=$2
  if [[ "$p1" == *,* ]]; then
    i1=$( echo "$p1" |cut -d, -f1 )
    i2=$( echo "$p1" |cut -d, -f2 )
    unchangedContent $i1 $i2 $sep
    if [[ $sep = "c" ]]; then
      getBlock $orig $i1 $i2 $cColor
    elif [[ $sep = "d" ]]; then
      getBlock $orig $i1 $i2 $dColor
    fi
  else
    if [[ $sep = "a" ]]; then
      unchangedContent $p1 $p1 $sep
      echo -n "<td bgcolor=$aColor>Line(s) added here</td>"
    elif [[ $sep = "c" ]]; then
      unchangedContent $p1 $p1 $sep
      echo -n "<td bgcolor=${cColor}>$(sed -n "${p1}p" < $orig)</td>"
    elif [[ $sep = "d" ]]; then
      unchangedContent $p1 $p1 $sep
      echo -n "<td bgcolor=${dColor}>$(sed -n "${p1}p" < $orig)</td>"
    fi
  fi
}

# Given some line(s) indices and a type of changes, 
#   echoes that new content
# $1 : the line(s) indices (can be # or #,#)
# $2 : the type of change (addition, change or deletion)
function newFileContent {
  p2=$1
  sep=$2
  if [[ "$p2" == *,* ]]; then
    i1=$( echo "$p2" |cut -d, -f1 )
    i2=$( echo "$p2" |cut -d, -f2 )
    if [[ "$sep" = "a" ]]; then
      getBlock $new $i1 $i2 $aColor
    elif [[ "$sep" = "c" ]]; then
      getBlock $new $i1 $i2 $cColor
    fi
  else
    if [[ "$sep" = "a" ]]; then
      echo -n "<td bgcolor=$aColor>"
    elif [[ "$sep" = "c" ]]; then
      echo -n "<td bgcolor=$cColor>"
    elif [[ "$sep" = "d" ]]; then
      echo -n "<td bgcolor=$dColor>"
    else
      echo -n "<td>"
    fi
    if [[ $p2 = 0 || "$sep" = "d" ]]; then
      echo -n "Line(s) deleted"
    else
      echo -n $(sed -n "${p2}p" < $new)
    fi
    echo -n "</td>"
  fi
}

# Take a line of the diff and echoes the changes
# $1 : the line (#(,#)?[acd](#(,#)?))
# $2 : the separetor (a, c or d)
function printToHtml {
  line=$1
  del=$2
  echo -n "<tr>"
  p1=$( echo "$line" |cut -d$del -f1 )
  p2=$( echo "$line" |cut -d$del -f2 )

  origFileContent $p1 $del
  newFileContent $p2 $del
  echo "</tr>"
}

# Iterates over the lines of the diff
# echo "<table border="0.5" width="50%">"
# echo -n "<tr><th width="50%" bgcolor=$black>${orig}</th>"
# echo "<th width="50%" bgcolor=$black>${name}</th></tr>" 
while read line; do 
  i=[0-9][0-9]*
  if [[ "$line" =~ $i(,$i)?[acd]$i(,$i)? ]]; then
    if [[ $nodiff = 1 ]]; then
      nodiff=0
      echo "<table border="0.5" width="50%">"
      echo -n "<tr><th width="50%" bgcolor=$black>${orig}</th>"
      echo "<th width="50%" bgcolor=$black>${name}</th></tr>" 
    fi
    if [[ "$line" == *a* ]]; then
      printToHtml $line a
    elif [[ "$line" == *c* ]]; then
      printToHtml $line c
    elif [[ "$line" == *d* ]]; then
      printToHtml $line d
    fi
  fi
done < <(echo "$RES")
# Echo the remaining lines of the file that were unchanged, if any
nbLines=$(($(wc -l $orig | cut -d' ' -f1) + 1 ))
# unchangedContent $nbLines $nbLines "e"
if [[ $nodiff = 1 ]]; then
  echo "<font size="2">No changes</font>"
else
  unchangedContent $nbLines $nbLines "e"
  echo "</table>"
  echo "<font size="2">BUILD FAILED</font>"
fi
# echo "</table>"


