#!/bin/bash

#TODO check result of m01, still buggy
#the deletion is not working properly

orig=$1
new=$2
aColor="#88FF88"
cColor="#8888FF"
dColor="#FF8888"
noCol="#FFFFFF"

current=0

RES=$(diff $orig $new)
# echo "$RES"

#should print the part of the document that is not changed

function getBlock {
  f=$1
  start=$2
  end=$3
  color=$4
  # $1 is file
  # $2 is the line where the block begins
  # $3 is the line where the bloch ends
  block=$(sed -n "${start},${end}p" < $f)
  echo "<td bgcolor=$color>"
  # echo "<table>"
  while read -r line; do
    # echo "<tr><td>$line</td></tr>"
    echo "$line<br/>"
  done <<< "$block"
  # echo "</table>"
  echo "</td>"
  # echo "<td>$(sed -n "${i1},${i2}p" < $1)</td>"
}

function unchangedContent {
  sep=$3
  if [[ $sep = "a" ]]; then
    s=$(($1 + 1))
  else
    s=$1
  fi
  e=$2
  # echo $current + $s + $e
  if [[ $(($current + 2)) = $s ]]; then
    # echo unchanged
    unchanged=$(sed -n "$(($current + 1))p" < $orig)
    echo "<tr><td>$unchanged</td>"
    echo "<td>$unchanged</td></tr>"
  elif [[ $(($current + 2)) -lt $s ]]; then
    # echo several lines
    getBlock $orig $(($current + 1)) $(($s - 1)) $noCol
    getBlock $orig $(($current + 1)) $(($s - 1)) $noCol
    echo "</tr>"
    if [[ $sep != "e" ]]; then
      echo "<tr>"
    fi
    # echo "<tr>"
  fi
  let current=$e
}

function newFileContent {
  p2=$1
  sep=$2
  if [[ "$p2" == *,* ]]; then
    i1=$( echo "$p2" |cut -d, -f1 )
    i2=$( echo "$p2" |cut -d, -f2 )
    if [[ "$sep" = "a" ]]; then
      getBlock $new $i1 $i2 $aColor
    elif [[ "$sep" = "c" ]]; then
      getBlock $new $i1 $i2 $cColor
    elif [[ "$sep" = "d" ]]; then
      getBlock $new $i1 $i2 $dColor
    fi
    # getBlock $new $p2 $noCol
  else
    if [[ "$sep" = "a" ]]; then
      echo "<td bgcolor=$aColor>"
    elif [[ "$sep" = "c" ]]; then
      echo "<td bgcolor=$cColor>"
    elif [[ "$sep" = "d" ]]; then
      echo "<td bgcolor=$dColor>"
    else
      echo "<td>"
    fi
    if [[ $p2 = 0 ]]; then
      echo "Line deleted"
    else
      echo $(sed -n "${p2}p" < $new)
    fi
    echo "</td>"
  fi
}

function origFileContent {
  p1=$1
  sep=$2
  if [[ "$p1" == *,* ]]; then
    i1=$( echo "$p1" |cut -d, -f1 )
    i2=$( echo "$p1" |cut -d, -f2 )
    unchangedContent $i1 $i2 $sep
    # Maybe need to split the two case to set colors
    if [[ $sep = "c" ]]; then
      getBlock $orig $i1 $i2 $cColor
    elif [[ $sep = "d" ]]; then
      getBlock $orig $i1 $i2 $dColor
    fi
  else
    if [[ $sep = "a" ]]; then
      unchangedContent $p1 $p1 $sep
      echo "<td bgcolor=$aColor>Line added here</td>"
    # Maybe need to split the two case to set colors
    elif [[ $sep = "c" ]]; then
      unchangedContent $p1 $p1 $sep
      echo "<td bgcolor=${cColor}>$(sed -n "${p1}p" < $orig)</td>"
    elif [[ $sep = "d" ]]; then
      unchangedContent $p1 $p1 $sep
      echo "<td bgcolor=${dColor}>$(sed -n "${p1}p" < $orig)</td>"
    fi
  fi
}

function printToHtml {
  line=$1
  del=$2
  echo "<tr>"
  p1=$( echo "$line" |cut -d$del -f1 )
  p2=$( echo "$line" |cut -d$del -f2 )

  origFileContent $p1 $del
  newFileContent $p2 $del
  echo "</tr>"
}

echo "<table border="0.5" width="50%">"
echo "<tr><th width="50%">${orig}</th><th width="50%">${new}</th></tr>" 
while read line; do 
  # echo $a
  i=[0-9][0-9]*
  if [[ "$line" =~ $i(,$i)?[acd]$i(,$i)? ]]; then
    if [[ "$line" == *a* ]]; then
      printToHtml $line a
    elif [[ "$line" == *c* ]]; then
      printToHtml $line c
    elif [[ "$line" == *d* ]]; then
      printToHtml $line d
    fi
  fi
done < <(echo "$RES")
nbLines=$(($(echo "$RES" | wc -l) + 2))
unchangedContent $nbLines $nbLines e
echo "</table>"

