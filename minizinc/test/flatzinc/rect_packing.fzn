predicate oscar_all_disjoint(array [int] of var int: x);
predicate oscar_all_equal_int(array [int] of var int: x);
predicate oscar_alldiff(array [int] of var int: x);
predicate oscar_among(var int: n, array [int] of var int: x, set of int: v);
predicate oscar_at_least_int(int: n, array [int] of var int: x, int: v);
predicate oscar_at_most1(int: n, array [int] of var int: x, int: v);
predicate oscar_at_most_int(int: n, array [int] of var int: x, int: v);
predicate oscar_bin_packing(int: c, array [int] of var int: bin, array [int] of int: w);
predicate oscar_bin_packing_capa(array [int] of int: c, array [int] of var int: bin, array [int] of int: w);
predicate oscar_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w);
predicate oscar_circuit(array [int] of var int: x);
predicate oscar_count_geq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_gt(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_leq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_lt(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_neq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate oscar_decreasing_int(array [int] of var int: x);
predicate oscar_diffn(array [int] of var int: x, array [int] of var int: y, array [int] of var int: dx, array [int] of var int: dy);
predicate oscar_disjoint(var set of int: s, var set of int: t);
predicate oscar_distribute(array [int] of var int: card, array [int] of var int: value, array [int] of var int: base);
predicate oscar_element_bool(var int: i, array [int] of var bool: x, var bool: y);
predicate oscar_element_int(var int: i, array [int] of var int: x, var int: y);
predicate oscar_global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate oscar_global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate oscar_global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lb, array [int] of int: ub);
predicate oscar_global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lb, array [int] of int: ub);
predicate oscar_increasing_int(array [int] of var int: x);
predicate oscar_int_set_channel(array [int] of var int: x, array [int] of var set of int: y);
predicate oscar_inverse(array [int] of var int: f, array [int] of var int: invf);
predicate oscar_inverse_set(array [int] of var set of int: f, array [int] of var set of int: invf);
predicate oscar_lex2(array [int] of var int: x2, int: i, int: j);
predicate oscar_lex_less_int(array [int] of var int: x, array [int] of var int: y);
predicate oscar_lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate oscar_link_set_to_booleans(var set of int: s, array [int] of var bool: b);
predicate oscar_maximum_int(var int: m, array [int] of var int: x);
predicate oscar_member_int(array [int] of var int: x, var int: y);
predicate oscar_minimum_int(var int: m, array [int] of var int: x);
predicate oscar_nvalue(var int: n, array [int] of var int: x);
predicate oscar_partition_set(array [int] of var set of int: s, set of int: universe);
predicate oscar_range(array [int] of var int: x, var set of int: s, var set of int: t);
predicate oscar_regular(array [int] of var int: x, int: Q, int: S, array [int] of int: d, int: q0, set of int: F);
predicate oscar_roots(array [int] of var int: x, var set of int: s, var set of int: t);
predicate oscar_sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate oscar_sort(array [int] of var int: x, array [int] of var int: y);
predicate oscar_strict_lex2(array [int] of var int: x2, int: i, int: j);
predicate oscar_subcircuit(array [int] of var int: x);
predicate oscar_sum_pred(var int: i, array [int] of set of int: sets, array [int] of int: c, var int: s);
predicate oscar_table_int(array [int] of var int: x, array [int] of int: t2);
predicate oscar_value_precede_chain_int(array [int] of int: c, array [int] of var int: x);
predicate oscar_value_precede_int(int: s, int: t, array [int] of var int: x);
array [1..45] of int: fgaps = [0, 2, 3, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10];
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var 3..3: Height :: output_var;
var 14..15: INT____00018 :: is_defined_var :: var_is_introduced;
var 14..15: Area :: output_var = INT____00018;
var 4..5: Width :: output_var;
array [1..3] of var 0..5: X :: output_array([1..3]);
array [1..3] of var 0..3: Y :: output_array([1..3]);
var bool: b_left____00001;
var bool: b_left____00010;
var bool: b_left____00014;
var bool: b_left____00019;
var bool: b_left____00028;
var bool: b_left____00032;
var bool: b_right____00002;
var bool: b_right____00020;
constraint array_bool_or([BOOL____00004, BOOL____00007], true);
constraint array_bool_or([BOOL____00022, BOOL____00025], true);
constraint array_bool_or([BOOL____00038, BOOL____00037, BOOL____00035, BOOL____00036], true);
constraint array_bool_or([BOOL____00042, BOOL____00041, BOOL____00039, BOOL____00040], true);
constraint array_bool_or([BOOL____00046, BOOL____00045, BOOL____00043, BOOL____00044], true);
constraint bool_eq_reif(b_left____00001, false, BOOL____00004) :: defines_var(BOOL____00004);
constraint bool_eq_reif(b_left____00010, false, BOOL____00012) :: defines_var(BOOL____00012);
constraint bool_eq_reif(b_left____00014, false, BOOL____00016) :: defines_var(BOOL____00016);
constraint bool_eq_reif(b_left____00019, false, BOOL____00022) :: defines_var(BOOL____00022);
constraint bool_eq_reif(b_left____00028, false, BOOL____00030) :: defines_var(BOOL____00030);
constraint bool_eq_reif(b_left____00032, false, BOOL____00034) :: defines_var(BOOL____00034);
constraint bool_eq_reif(b_right____00002, false, BOOL____00007) :: defines_var(BOOL____00007);
constraint bool_eq_reif(b_right____00020, false, BOOL____00025) :: defines_var(BOOL____00025);
constraint bool_le(BOOL____00004, BOOL____00005);
constraint bool_le(BOOL____00007, BOOL____00008);
constraint bool_le(BOOL____00012, BOOL____00013);
constraint bool_le(BOOL____00016, BOOL____00017);
constraint bool_le(BOOL____00022, BOOL____00023);
constraint bool_le(BOOL____00025, BOOL____00026);
constraint bool_le(BOOL____00030, BOOL____00031);
constraint bool_le(b_left____00001, BOOL____00003);
constraint bool_le(b_left____00010, BOOL____00011);
constraint bool_le(b_left____00014, BOOL____00015);
constraint bool_le(b_left____00019, BOOL____00021);
constraint bool_le(b_left____00028, BOOL____00029);
constraint bool_le(b_left____00032, BOOL____00033);
constraint bool_le(b_right____00002, BOOL____00006);
constraint bool_le(b_right____00020, BOOL____00024);
constraint int_le_reif(X[1], 0, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_le_reif(X[2], 0, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_le_reif(X[3], 0, BOOL____00015) :: defines_var(BOOL____00015);
constraint int_le_reif(Y[1], 0, BOOL____00021) :: defines_var(BOOL____00021);
constraint int_le_reif(Y[2], 0, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_le_reif(Y[3], 0, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_lin_le([-1, 1], [Height, Y[1]], -1);
constraint int_lin_le([-1, 1], [Height, Y[2]], -2);
constraint int_lin_le([-1, 1], [Height, Y[3]], -3);
constraint int_lin_le([-1, 1], [Width, X[1]], -1);
constraint int_lin_le([-1, 1], [Width, X[2]], -2);
constraint int_lin_le([-1, 1], [Width, X[3]], -3);
constraint int_lin_le([-1, 2], [Height, Y[3]], -3);
constraint int_lin_le([-1, 2], [Width, X[3]], -3);
constraint int_lin_le_reif([-1, 1], [Height, Y[1]], -2, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_lin_le_reif([-1, 1], [Width, X[1]], -2, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_le_reif([-1, 1], [X[1], X[2]], -2, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_lin_le_reif([-1, 1], [X[1], X[3]], -3, BOOL____00039) :: defines_var(BOOL____00039);
constraint int_lin_le_reif([-1, 1], [X[2], X[3]], -3, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_lin_le_reif([-1, 1], [Y[1], Y[2]], -2, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_lin_le_reif([-1, 1], [Y[1], Y[3]], -3, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_lin_le_reif([-1, 1], [Y[2], Y[3]], -3, BOOL____00045) :: defines_var(BOOL____00045);
constraint int_lin_le_reif([1, -1], [Height, Y[1]], 1, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_lin_le_reif([1, -1], [Height, Y[2]], 2, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_lin_le_reif([1, -1], [Width, X[1]], 1, BOOL____00006) :: defines_var(BOOL____00006);
constraint int_lin_le_reif([1, -1], [Width, X[2]], 2, BOOL____00013) :: defines_var(BOOL____00013);
constraint int_lin_le_reif([1, -1], [Width, X[3]], 3, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_lin_le_reif([1, -1], [X[1], X[2]], -1, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_lin_le_reif([1, -1], [X[1], X[3]], -1, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_lin_le_reif([1, -1], [X[2], X[3]], -2, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_lin_le_reif([1, -1], [Y[1], Y[2]], -1, BOOL____00038) :: defines_var(BOOL____00038);
constraint int_lin_le_reif([1, -1], [Y[1], Y[3]], -1, BOOL____00042) :: defines_var(BOOL____00042);
constraint int_lin_le_reif([1, -1], [Y[2], Y[3]], -2, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_lt_reif(0, X[1], BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lt_reif(0, Y[1], BOOL____00023) :: defines_var(BOOL____00023);
constraint int_times(Height, Width, INT____00018) :: defines_var(INT____00018);
constraint oscar_cumulative([X[1], X[2], X[3]], [1, 2, 3], [1, 2, 3], Height);
constraint oscar_cumulative([Y[1], Y[2], Y[3]], [1, 2, 3], [1, 2, 3], Width);
solve  :: int_search([INT____00018, Height, Y[3], Y[2], Y[1], X[3], X[2], X[1]], input_order, indomain_min, complete) satisfy;
