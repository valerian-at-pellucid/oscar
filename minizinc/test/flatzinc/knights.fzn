predicate oscar_all_disjoint(array [int] of var int: x);
predicate oscar_all_equal_int(array [int] of var int: x);
predicate oscar_alldiff(array [int] of var int: x);
predicate oscar_among(var int: n, array [int] of var int: x, set of int: v);
predicate oscar_at_least_int(int: n, array [int] of var int: x, int: v);
predicate oscar_at_most1(int: n, array [int] of var int: x, int: v);
predicate oscar_at_most_int(int: n, array [int] of var int: x, int: v);
predicate oscar_bin_packing(int: c, array [int] of var int: bin, array [int] of int: w);
predicate oscar_bin_packing_capa(array [int] of int: c, array [int] of var int: bin, array [int] of int: w);
predicate oscar_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w);
predicate oscar_circuit(array [int] of var int: x);
predicate oscar_count_geq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_gt(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_leq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_lt(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_neq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate oscar_decreasing_int(array [int] of var int: x);
predicate oscar_diffn(array [int] of var int: x, array [int] of var int: y, array [int] of var int: dx, array [int] of var int: dy);
predicate oscar_disjoint(var set of int: s, var set of int: t);
predicate oscar_distribute(array [int] of var int: card, array [int] of var int: value, array [int] of var int: base);
predicate oscar_element_bool(var int: i, array [int] of var bool: x, var bool: y);
predicate oscar_element_int(var int: i, array [int] of var int: x, var int: y);
predicate oscar_global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate oscar_global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate oscar_global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lb, array [int] of int: ub);
predicate oscar_global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lb, array [int] of int: ub);
predicate oscar_increasing_int(array [int] of var int: x);
predicate oscar_int_set_channel(array [int] of var int: x, array [int] of var set of int: y);
predicate oscar_inverse(array [int] of var int: f, array [int] of var int: invf);
predicate oscar_inverse_set(array [int] of var set of int: f, array [int] of var set of int: invf);
predicate oscar_lex2(array [int] of var int: x2, int: i, int: j);
predicate oscar_lex_less_int(array [int] of var int: x, array [int] of var int: y);
predicate oscar_lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate oscar_link_set_to_booleans(var set of int: s, array [int] of var bool: b);
predicate oscar_maximum_int(var int: m, array [int] of var int: x);
predicate oscar_member_int(array [int] of var int: x, var int: y);
predicate oscar_minimum_int(var int: m, array [int] of var int: x);
predicate oscar_nvalue(var int: n, array [int] of var int: x);
predicate oscar_partition_set(array [int] of var set of int: s, set of int: universe);
predicate oscar_range(array [int] of var int: x, var set of int: s, var set of int: t);
predicate oscar_regular(array [int] of var int: x, int: Q, int: S, array [int] of int: d, int: q0, set of int: F);
predicate oscar_roots(array [int] of var int: x, var set of int: s, var set of int: t);
predicate oscar_sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate oscar_sort(array [int] of var int: x, array [int] of var int: y);
predicate oscar_strict_lex2(array [int] of var int: x2, int: i, int: j);
predicate oscar_subcircuit(array [int] of var int: x);
predicate oscar_sum_pred(var int: i, array [int] of set of int: sets, array [int] of int: c, var int: s);
predicate oscar_table_int(array [int] of var int: x, array [int] of int: t2);
predicate oscar_value_precede_chain_int(array [int] of int: c, array [int] of var int: x);
predicate oscar_value_precede_int(int: s, int: t, array [int] of var int: x);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00006 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00030 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00036 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00042 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00048 :: is_defined_var :: var_is_introduced;
var 9..72: INT____00052 :: is_defined_var :: var_is_introduced;
var 9..72: INT____00053 :: is_defined_var :: var_is_introduced;
var 9..72: INT____00054 :: is_defined_var :: var_is_introduced;
var 9..72: INT____00055 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..8: c :: output_array([1..4]);
array [1..4] of var 1..8: r :: output_array([1..4]);
constraint array_bool_and([BOOL____00001, BOOL____00002], BOOL____00005) :: defines_var(BOOL____00005);
constraint array_bool_and([BOOL____00001, BOOL____00007], BOOL____00009) :: defines_var(BOOL____00009);
constraint array_bool_and([BOOL____00003, BOOL____00004], BOOL____00006) :: defines_var(BOOL____00006);
constraint array_bool_and([BOOL____00003, BOOL____00012], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_and([BOOL____00008, BOOL____00004], BOOL____00010) :: defines_var(BOOL____00010);
constraint array_bool_and([BOOL____00008, BOOL____00012], BOOL____00016) :: defines_var(BOOL____00016);
constraint array_bool_and([BOOL____00011, BOOL____00002], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_and([BOOL____00011, BOOL____00007], BOOL____00015) :: defines_var(BOOL____00015);
constraint array_bool_and([BOOL____00017, BOOL____00018], BOOL____00021) :: defines_var(BOOL____00021);
constraint array_bool_and([BOOL____00017, BOOL____00023], BOOL____00025) :: defines_var(BOOL____00025);
constraint array_bool_and([BOOL____00019, BOOL____00020], BOOL____00022) :: defines_var(BOOL____00022);
constraint array_bool_and([BOOL____00019, BOOL____00028], BOOL____00030) :: defines_var(BOOL____00030);
constraint array_bool_and([BOOL____00024, BOOL____00020], BOOL____00026) :: defines_var(BOOL____00026);
constraint array_bool_and([BOOL____00024, BOOL____00028], BOOL____00032) :: defines_var(BOOL____00032);
constraint array_bool_and([BOOL____00027, BOOL____00018], BOOL____00029) :: defines_var(BOOL____00029);
constraint array_bool_and([BOOL____00027, BOOL____00023], BOOL____00031) :: defines_var(BOOL____00031);
constraint array_bool_and([BOOL____00033, BOOL____00034], BOOL____00037) :: defines_var(BOOL____00037);
constraint array_bool_and([BOOL____00033, BOOL____00039], BOOL____00041) :: defines_var(BOOL____00041);
constraint array_bool_and([BOOL____00035, BOOL____00036], BOOL____00038) :: defines_var(BOOL____00038);
constraint array_bool_and([BOOL____00035, BOOL____00044], BOOL____00046) :: defines_var(BOOL____00046);
constraint array_bool_and([BOOL____00040, BOOL____00036], BOOL____00042) :: defines_var(BOOL____00042);
constraint array_bool_and([BOOL____00040, BOOL____00044], BOOL____00048) :: defines_var(BOOL____00048);
constraint array_bool_and([BOOL____00043, BOOL____00034], BOOL____00045) :: defines_var(BOOL____00045);
constraint array_bool_and([BOOL____00043, BOOL____00039], BOOL____00047) :: defines_var(BOOL____00047);
constraint array_bool_or([BOOL____00015, BOOL____00016, BOOL____00013, BOOL____00014, BOOL____00009, BOOL____00010, BOOL____00005, BOOL____00006], true);
constraint array_bool_or([BOOL____00031, BOOL____00032, BOOL____00029, BOOL____00030, BOOL____00025, BOOL____00026, BOOL____00021, BOOL____00022], true);
constraint array_bool_or([BOOL____00047, BOOL____00048, BOOL____00045, BOOL____00046, BOOL____00041, BOOL____00042, BOOL____00037, BOOL____00038], true);
constraint int_eq(c[1], 1);
constraint int_eq(c[2], 3);
constraint int_eq(c[4], 2);
constraint int_eq(r[1], 1);
constraint int_eq(r[2], 2);
constraint int_eq(r[4], 3);
constraint int_lin_eq([-1, 1, 8], [INT____00052, c[1], r[1]], 0) :: defines_var(INT____00052);
constraint int_lin_eq([-1, 1, 8], [INT____00053, c[2], r[2]], 0) :: defines_var(INT____00053);
constraint int_lin_eq([-1, 1, 8], [INT____00054, c[3], r[3]], 0) :: defines_var(INT____00054);
constraint int_lin_eq([-1, 1, 8], [INT____00055, c[4], r[4]], 0) :: defines_var(INT____00055);
constraint int_lin_eq_reif([-1, 1], [c[1], c[2]], -2, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_eq_reif([-1, 1], [c[1], c[2]], -1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lin_eq_reif([-1, 1], [c[1], c[2]], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_lin_eq_reif([-1, 1], [c[1], c[2]], 2, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_eq_reif([-1, 1], [c[2], c[3]], -2, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_lin_eq_reif([-1, 1], [c[2], c[3]], -1, BOOL____00018) :: defines_var(BOOL____00018);
constraint int_lin_eq_reif([-1, 1], [c[2], c[3]], 1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_lin_eq_reif([-1, 1], [c[2], c[3]], 2, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_lin_eq_reif([-1, 1], [c[3], c[4]], -2, BOOL____00036) :: defines_var(BOOL____00036);
constraint int_lin_eq_reif([-1, 1], [c[3], c[4]], -1, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_lin_eq_reif([-1, 1], [c[3], c[4]], 1, BOOL____00039) :: defines_var(BOOL____00039);
constraint int_lin_eq_reif([-1, 1], [c[3], c[4]], 2, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_lin_eq_reif([-1, 1], [r[1], r[2]], -2, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_lin_eq_reif([-1, 1], [r[1], r[2]], -1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_lin_eq_reif([-1, 1], [r[1], r[2]], 1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_eq_reif([-1, 1], [r[1], r[2]], 2, BOOL____00011) :: defines_var(BOOL____00011);
constraint int_lin_eq_reif([-1, 1], [r[2], r[3]], -2, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_lin_eq_reif([-1, 1], [r[2], r[3]], -1, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_lin_eq_reif([-1, 1], [r[2], r[3]], 1, BOOL____00024) :: defines_var(BOOL____00024);
constraint int_lin_eq_reif([-1, 1], [r[2], r[3]], 2, BOOL____00027) :: defines_var(BOOL____00027);
constraint int_lin_eq_reif([-1, 1], [r[3], r[4]], -2, BOOL____00033) :: defines_var(BOOL____00033);
constraint int_lin_eq_reif([-1, 1], [r[3], r[4]], -1, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_lin_eq_reif([-1, 1], [r[3], r[4]], 1, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_lin_eq_reif([-1, 1], [r[3], r[4]], 2, BOOL____00043) :: defines_var(BOOL____00043);
constraint oscar_alldiff([INT____00052, INT____00053, INT____00054, INT____00055]);
solve satisfy;
