predicate oscar_all_disjoint(array [int] of var int: x);
predicate oscar_all_equal_int(array [int] of var int: x);
predicate oscar_alldiff(array [int] of var int: x);
predicate oscar_among(var int: n, array [int] of var int: x, set of int: v);
predicate oscar_at_least_int(int: n, array [int] of var int: x, int: v);
predicate oscar_at_most1(int: n, array [int] of var int: x, int: v);
predicate oscar_at_most_int(int: n, array [int] of var int: x, int: v);
predicate oscar_bin_packing(int: c, array [int] of var int: bin, array [int] of int: w);
predicate oscar_bin_packing_capa(array [int] of int: c, array [int] of var int: bin, array [int] of int: w);
predicate oscar_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w);
predicate oscar_circuit(array [int] of var int: x);
predicate oscar_count_geq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_gt(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_leq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_lt(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_neq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate oscar_decreasing_int(array [int] of var int: x);
predicate oscar_diffn(array [int] of var int: x, array [int] of var int: y, array [int] of var int: dx, array [int] of var int: dy);
predicate oscar_disjoint(var set of int: s, var set of int: t);
predicate oscar_distribute(array [int] of var int: card, array [int] of var int: value, array [int] of var int: base);
predicate oscar_element_bool(var int: i, array [int] of var bool: x, var bool: y);
predicate oscar_element_int(var int: i, array [int] of var int: x, var int: y);
predicate oscar_global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate oscar_global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate oscar_global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lb, array [int] of int: ub);
predicate oscar_global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lb, array [int] of int: ub);
predicate oscar_increasing_int(array [int] of var int: x);
predicate oscar_int_set_channel(array [int] of var int: x, array [int] of var set of int: y);
predicate oscar_inverse(array [int] of var int: f, array [int] of var int: invf);
predicate oscar_inverse_set(array [int] of var set of int: f, array [int] of var set of int: invf);
predicate oscar_lex2(array [int] of var int: x2, int: i, int: j);
predicate oscar_lex_less_int(array [int] of var int: x, array [int] of var int: y);
predicate oscar_lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate oscar_link_set_to_booleans(var set of int: s, array [int] of var bool: b);
predicate oscar_maximum_int(var int: m, array [int] of var int: x);
predicate oscar_member_int(array [int] of var int: x, var int: y);
predicate oscar_minimum_int(var int: m, array [int] of var int: x);
predicate oscar_nvalue(var int: n, array [int] of var int: x);
predicate oscar_partition_set(array [int] of var set of int: s, set of int: universe);
predicate oscar_range(array [int] of var int: x, var set of int: s, var set of int: t);
predicate oscar_regular(array [int] of var int: x, int: Q, int: S, array [int] of int: d, int: q0, set of int: F);
predicate oscar_roots(array [int] of var int: x, var set of int: s, var set of int: t);
predicate oscar_sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate oscar_sort(array [int] of var int: x, array [int] of var int: y);
predicate oscar_strict_lex2(array [int] of var int: x2, int: i, int: j);
predicate oscar_subcircuit(array [int] of var int: x);
predicate oscar_sum_pred(var int: i, array [int] of set of int: sets, array [int] of int: c, var int: s);
predicate oscar_table_int(array [int] of var int: x, array [int] of int: t2);
predicate oscar_value_precede_chain_int(array [int] of int: c, array [int] of var int: x);
predicate oscar_value_precede_int(int: s, int: t, array [int] of var int: x);
array [1..36] of int: grid_data = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0];
array [1..24] of int: h_clue = [2, 2, 2, 4, 3, 1, 4, 27, 4, 1, 2, 5, 4, 4, 2, 15, 5, 2, 4, 11, 6, 3, 2, 13];
array [1..140] of int: magic = [2, 3, 1, 2, 0, 2, 4, 1, 3, 2, 3, 6, 1, 3, 0, 3, 7, 1, 4, 3, 4, 10, 1, 4, 0, 4, 11, 1, 5, 4, 5, 15, 1, 5, 0, 5, 16, 1, 6, 5, 6, 21, 1, 6, 0, 6, 22, 1, 7, 6, 7, 28, 1, 7, 0, 7, 29, 1, 8, 7, 8, 36, 1, 8, 0, 8, 37, 1, 9, 8, 9, 45, 1, 9, 0, 2, 17, 8, 9, 0, 2, 16, 7, 9, 8, 3, 24, 7, 9, 0, 3, 23, 6, 9, 7, 4, 30, 6, 9, 0, 4, 29, 5, 9, 6, 5, 35, 5, 9, 0, 5, 34, 4, 9, 5, 6, 39, 4, 9, 0, 6, 38, 3, 9, 4, 7, 42, 3, 9, 0, 7, 41, 2, 9, 3, 8, 44, 2, 9, 0];
array [1..24] of int: v_clue = [1, 3, 4, 17, 1, 4, 2, 5, 2, 2, 2, 13, 2, 5, 4, 24, 3, 6, 2, 7, 4, 4, 2, 9];
array [1..36] of var 0..9: grid :: output_array([1..6, 1..6]);
constraint int_eq(grid[1], 0);
constraint int_eq(grid[2], 0);
constraint int_eq(grid[3], 0);
constraint int_eq(grid[4], 0);
constraint int_eq(grid[5], 0);
constraint int_eq(grid[6], 0);
constraint int_eq(grid[7], 0);
constraint int_eq(grid[8], 0);
constraint int_eq(grid[11], 0);
constraint int_eq(grid[12], 0);
constraint int_eq(grid[13], 0);
constraint int_eq(grid[18], 0);
constraint int_eq(grid[19], 0);
constraint int_eq(grid[22], 0);
constraint int_eq(grid[25], 0);
constraint int_eq(grid[26], 0);
constraint int_eq(grid[31], 0);
constraint int_eq(grid[32], 0);
constraint int_eq(grid[33], 0);
constraint int_eq(grid[36], 0);
constraint int_le(1, grid[9]);
constraint int_le(1, grid[10]);
constraint int_le(1, grid[27]);
constraint int_le(1, grid[28]);
constraint int_le(1, grid[29]);
constraint int_le(1, grid[30]);
constraint int_le(grid[9], 3);
constraint int_le(grid[10], 3);
constraint int_le(grid[27], 5);
constraint int_le(grid[28], 5);
constraint int_le(grid[29], 5);
constraint int_le(grid[30], 5);
constraint int_lin_eq([1, 1], [grid[9], grid[10]], 4);
constraint int_lin_eq([1, 1], [grid[10], grid[16]], 5);
constraint int_lin_eq([1, 1], [grid[14], grid[20]], 13);
constraint int_lin_eq([1, 1], [grid[20], grid[21]], 5);
constraint int_lin_eq([1, 1], [grid[23], grid[24]], 15);
constraint int_lin_eq([1, 1], [grid[24], grid[30]], 7);
constraint int_lin_eq([1, 1], [grid[28], grid[34]], 9);
constraint int_lin_eq([1, 1], [grid[34], grid[35]], 13);
constraint int_lin_eq([1, 1, 1, 1], [grid[9], grid[15], grid[21], grid[27]], 17);
constraint int_lin_eq([1, 1, 1, 1], [grid[14], grid[15], grid[16], grid[17]], 27);
constraint int_lin_eq([1, 1, 1, 1], [grid[17], grid[23], grid[29], grid[35]], 24);
constraint int_lin_eq([1, 1, 1, 1], [grid[27], grid[28], grid[29], grid[30]], 11);
constraint int_lt(0, grid[9]);
constraint int_lt(0, grid[10]);
constraint int_lt(0, grid[14]);
constraint int_lt(0, grid[15]);
constraint int_lt(0, grid[16]);
constraint int_lt(0, grid[17]);
constraint int_lt(0, grid[20]);
constraint int_lt(0, grid[21]);
constraint int_lt(0, grid[23]);
constraint int_lt(0, grid[24]);
constraint int_lt(0, grid[27]);
constraint int_lt(0, grid[28]);
constraint int_lt(0, grid[29]);
constraint int_lt(0, grid[30]);
constraint int_lt(0, grid[34]);
constraint int_lt(0, grid[35]);
constraint int_ne(grid[9], 2);
constraint int_ne(grid[10], 2);
constraint int_ne(grid[27], 4);
constraint int_ne(grid[28], 4);
constraint int_ne(grid[29], 4);
constraint int_ne(grid[30], 4);
constraint oscar_alldiff([grid[9], grid[10]]);
constraint oscar_alldiff([grid[10], grid[16]]);
constraint oscar_alldiff([grid[14], grid[20]]);
constraint oscar_alldiff([grid[20], grid[21]]);
constraint oscar_alldiff([grid[23], grid[24]]);
constraint oscar_alldiff([grid[24], grid[30]]);
constraint oscar_alldiff([grid[28], grid[34]]);
constraint oscar_alldiff([grid[34], grid[35]]);
constraint oscar_alldiff([grid[9], grid[15], grid[21], grid[27]]);
constraint oscar_alldiff([grid[14], grid[15], grid[16], grid[17]]);
constraint oscar_alldiff([grid[17], grid[23], grid[29], grid[35]]);
constraint oscar_alldiff([grid[27], grid[28], grid[29], grid[30]]);
solve satisfy;
