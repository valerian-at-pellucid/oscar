predicate oscar_all_disjoint(array [int] of var int: x);
predicate oscar_all_equal_int(array [int] of var int: x);
predicate oscar_alldiff(array [int] of var int: x);
predicate oscar_among(var int: n, array [int] of var int: x, set of int: v);
predicate oscar_at_least_int(int: n, array [int] of var int: x, int: v);
predicate oscar_at_most1(int: n, array [int] of var int: x, int: v);
predicate oscar_at_most_int(int: n, array [int] of var int: x, int: v);
predicate oscar_bin_packing(int: c, array [int] of var int: bin, array [int] of int: w);
predicate oscar_bin_packing_capa(array [int] of int: c, array [int] of var int: bin, array [int] of int: w);
predicate oscar_bin_packing_load(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w);
predicate oscar_circuit(array [int] of var int: x);
predicate oscar_count_geq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_gt(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_leq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_lt(array [int] of var int: x, var int: y, var int: c);
predicate oscar_count_neq(array [int] of var int: x, var int: y, var int: c);
predicate oscar_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate oscar_decreasing_int(array [int] of var int: x);
predicate oscar_diffn(array [int] of var int: x, array [int] of var int: y, array [int] of var int: dx, array [int] of var int: dy);
predicate oscar_disjoint(var set of int: s, var set of int: t);
predicate oscar_distribute(array [int] of var int: card, array [int] of var int: value, array [int] of var int: base);
predicate oscar_element_bool(var int: i, array [int] of var bool: x, var bool: y);
predicate oscar_element_int(var int: i, array [int] of var int: x, var int: y);
predicate oscar_global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate oscar_global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate oscar_global_cardinality_low_up(array [int] of var int: x, array [int] of int: cover, array [int] of int: lb, array [int] of int: ub);
predicate oscar_global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lb, array [int] of int: ub);
predicate oscar_increasing_int(array [int] of var int: x);
predicate oscar_int_set_channel(array [int] of var int: x, array [int] of var set of int: y);
predicate oscar_inverse(array [int] of var int: f, array [int] of var int: invf);
predicate oscar_inverse_set(array [int] of var set of int: f, array [int] of var set of int: invf);
predicate oscar_lex2(array [int] of var int: x2, int: i, int: j);
predicate oscar_lex_less_int(array [int] of var int: x, array [int] of var int: y);
predicate oscar_lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate oscar_link_set_to_booleans(var set of int: s, array [int] of var bool: b);
predicate oscar_maximum_int(var int: m, array [int] of var int: x);
predicate oscar_member_int(array [int] of var int: x, var int: y);
predicate oscar_minimum_int(var int: m, array [int] of var int: x);
predicate oscar_nvalue(var int: n, array [int] of var int: x);
predicate oscar_partition_set(array [int] of var set of int: s, set of int: universe);
predicate oscar_range(array [int] of var int: x, var set of int: s, var set of int: t);
predicate oscar_regular(array [int] of var int: x, int: Q, int: S, array [int] of int: d, int: q0, set of int: F);
predicate oscar_roots(array [int] of var int: x, var set of int: s, var set of int: t);
predicate oscar_sliding_sum(int: low, int: up, int: seq, array [int] of var int: vs);
predicate oscar_sort(array [int] of var int: x, array [int] of var int: y);
predicate oscar_strict_lex2(array [int] of var int: x2, int: i, int: j);
predicate oscar_subcircuit(array [int] of var int: x);
predicate oscar_sum_pred(var int: i, array [int] of set of int: sets, array [int] of int: c, var int: s);
predicate oscar_table_int(array [int] of var int: x, array [int] of int: t2);
predicate oscar_value_precede_chain_int(array [int] of int: c, array [int] of var int: x);
predicate oscar_value_precede_int(int: s, int: t, array [int] of var int: x);
array [1..864] of int: dfa = [7, 5, 5, 5, 5, 3, 0, 2, 2, 2, 2, 2, 7, 5, 5, 5, 5, 3, 19, 4, 4, 4, 4, 3, 30, 4, 4, 4, 4, 3, 0, 10, 10, 10, 10, 10, 46, 8, 8, 8, 8, 0, 0, 12, 12, 12, 12, 13, 0, 15, 15, 15, 15, 14, 0, 16, 16, 16, 16, 16, 0, 18, 18, 18, 18, 17, 0, 20, 20, 20, 20, 20, 0, 21, 21, 21, 21, 21, 0, 22, 22, 22, 22, 22, 0, 23, 23, 23, 23, 23, 0, 28, 28, 28, 28, 0, 47, 22, 22, 22, 22, 22, 47, 23, 23, 23, 23, 23, 46, 11, 11, 11, 11, 24, 0, 26, 26, 26, 26, 26, 0, 25, 25, 25, 25, 25, 0, 27, 27, 27, 27, 25, 0, 29, 29, 29, 29, 26, 0, 31, 31, 31, 31, 31, 32, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 46, 9, 9, 9, 9, 6, 47, 16, 16, 16, 16, 16, 0, 35, 35, 35, 35, 0, 60, 35, 35, 35, 35, 0, 0, 37, 37, 37, 37, 39, 0, 39, 39, 39, 39, 39, 60, 37, 37, 37, 37, 39, 0, 40, 40, 40, 40, 40, 0, 41, 41, 41, 41, 41, 0, 42, 42, 42, 42, 42, 0, 43, 43, 43, 43, 43, 0, 45, 45, 45, 45, 45, 0, 47, 47, 47, 47, 47, 60, 47, 47, 47, 47, 47, 48, 0, 0, 0, 0, 0, 49, 44, 44, 44, 44, 0, 53, 38, 38, 38, 38, 38, 60, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 0, 51, 51, 51, 51, 0, 0, 52, 52, 52, 52, 52, 0, 54, 54, 54, 54, 54, 0, 55, 55, 55, 55, 55, 0, 56, 56, 56, 56, 56, 0, 57, 57, 57, 57, 57, 0, 60, 60, 60, 60, 0, 0, 58, 58, 58, 58, 58, 0, 59, 59, 59, 59, 59, 61, 55, 55, 55, 55, 0, 62, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 62, 62, 62, 62, 0, 0, 63, 63, 63, 63, 0, 0, 2, 2, 2, 2, 2, 3, 4, 3, 3, 3, 3, 2, 0, 2, 2, 2, 2, 3, 4, 3, 3, 3, 3, 5, 9, 5, 5, 5, 5, 6, 0, 6, 6, 6, 6, 7, 0, 7, 7, 7, 7, 8, 0, 8, 8, 8, 8, 0, 9, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 4, 4, 14, 4, 4, 5, 2, 2, 0, 2, 2, 2, 3, 3, 10, 3, 3, 5, 3, 3, 12, 3, 3, 5, 4, 4, 14, 4, 4, 5, 8, 8, 0, 8, 8, 0, 9, 9, 0, 9, 9, 13, 11, 11, 0, 11, 11, 11, 11, 11, 22, 11, 11, 11, 7, 7, 15, 7, 7, 11, 13, 13, 0, 13, 13, 13, 6, 6, 15, 6, 6, 0, 0, 0, 22, 0, 0, 0, 6, 6, 25, 6, 6, 0, 17, 17, 29, 17, 17, 16, 19, 19, 0, 19, 19, 19, 20, 20, 0, 20, 20, 20, 21, 21, 0, 21, 21, 21, 22, 22, 0, 22, 22, 0, 23, 23, 0, 23, 23, 24, 24, 24, 0, 24, 24, 24, 26, 26, 0, 26, 26, 0, 26, 26, 27, 26, 26, 0, 0, 0, 27, 0, 0, 0, 18, 18, 29, 18, 18, 0, 0, 0, 30, 0, 0, 0, 28, 28, 0, 28, 28, 0, 30, 30, 0, 30, 30, 0, 32, 32, 0, 32, 32, 32, 33, 33, 0, 33, 33, 33, 34, 34, 0, 34, 34, 0, 35, 35, 0, 35, 35, 35, 36, 36, 0, 36, 36, 36, 0, 0, 37, 0, 0, 0, 31, 31, 40, 31, 31, 0, 0, 0, 45, 0, 0, 0, 39, 39, 0, 39, 39, 39, 41, 41, 0, 41, 41, 41, 42, 42, 0, 42, 42, 42, 43, 43, 0, 43, 43, 0, 44, 44, 0, 44, 44, 44, 45, 45, 0, 45, 45, 0, 38, 38, 46, 38, 38, 0, 0, 0, 50, 0, 0, 0, 0, 0, 51, 0, 0, 0, 47, 47, 0, 47, 47, 47, 49, 49, 0, 49, 49, 49, 51, 51, 0, 51, 51, 0, 48, 48, 52, 48, 48, 0, 0, 0, 53, 0, 0, 0, 0, 0, 54, 0, 0, 0, 53, 53, 0, 53, 53, 0, 54, 54, 0, 54, 54, 0, 2, 2, 0, 2, 2, 2, 3, 3, 3, 4, 3, 3, 2, 2, 2, 0, 2, 2, 3, 3, 3, 4, 3, 3, 2, 2, 2, 0, 2, 2, 3, 3, 3, 3, 8, 3, 2, 2, 2, 2, 0, 2, 3, 3, 3, 3, 8, 3, 5, 5, 5, 5, 0, 5, 6, 6, 6, 6, 0, 6, 7, 7, 7, 7, 0, 7, 0, 0, 0, 0, 9, 0, 4, 4, 4, 4, 13, 4, 10, 10, 10, 10, 0, 10, 11, 11, 11, 11, 0, 11, 12, 12, 12, 12, 0, 12, 13, 13, 13, 13, 0, 13, 0, 0, 0, 0, 14, 0, 2, 2, 2, 2, 0, 2];
array [1..25] of int: tiles = [63, 6, 1, 2, 0, 9, 6, 1, 2, 378, 54, 6, 1, 2, 432, 4, 6, 1, 2, 756, 14, 6, 1, 2, 780];
array [1..20] of var 1..6: board :: output_array([1..20]);
constraint int_eq(board[5], 6);
constraint int_eq(board[10], 6);
constraint int_eq(board[15], 6);
constraint int_eq(board[20], 6);
constraint int_ne(board[1], 6);
constraint int_ne(board[2], 6);
constraint int_ne(board[3], 6);
constraint int_ne(board[4], 6);
constraint int_ne(board[6], 6);
constraint int_ne(board[7], 6);
constraint int_ne(board[8], 6);
constraint int_ne(board[9], 6);
constraint int_ne(board[11], 6);
constraint int_ne(board[12], 6);
constraint int_ne(board[13], 6);
constraint int_ne(board[14], 6);
constraint int_ne(board[16], 6);
constraint int_ne(board[17], 6);
constraint int_ne(board[18], 6);
constraint int_ne(board[19], 6);
constraint oscar_regular(board, 4, 6, [3, 3, 3, 4, 3, 3, 2, 2, 2, 0, 2, 2, 3, 3, 3, 4, 3, 3, 2, 2, 2, 0, 2, 2], 1, 1..2);
constraint oscar_regular(board, 9, 6, [3, 4, 3, 3, 3, 3, 2, 0, 2, 2, 2, 2, 3, 4, 3, 3, 3, 3, 5, 9, 5, 5, 5, 5, 6, 0, 6, 6, 6, 6, 7, 0, 7, 7, 7, 7, 8, 0, 8, 8, 8, 8, 0, 9, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2], 1, 1..2);
constraint oscar_regular(board, 14, 6, [3, 3, 3, 3, 8, 3, 2, 2, 2, 2, 0, 2, 3, 3, 3, 3, 8, 3, 5, 5, 5, 5, 0, 5, 6, 6, 6, 6, 0, 6, 7, 7, 7, 7, 0, 7, 0, 0, 0, 0, 9, 0, 4, 4, 4, 4, 13, 4, 10, 10, 10, 10, 0, 10, 11, 11, 11, 11, 0, 11, 12, 12, 12, 12, 0, 12, 13, 13, 13, 13, 0, 13, 0, 0, 0, 0, 14, 0, 2, 2, 2, 2, 0, 2], 1, 1..2);
constraint oscar_regular(board, 54, 6, [4, 4, 14, 4, 4, 5, 2, 2, 0, 2, 2, 2, 3, 3, 10, 3, 3, 5, 3, 3, 12, 3, 3, 5, 4, 4, 14, 4, 4, 5, 8, 8, 0, 8, 8, 0, 9, 9, 0, 9, 9, 13, 11, 11, 0, 11, 11, 11, 11, 11, 22, 11, 11, 11, 7, 7, 15, 7, 7, 11, 13, 13, 0, 13, 13, 13, 6, 6, 15, 6, 6, 0, 0, 0, 22, 0, 0, 0, 6, 6, 25, 6, 6, 0, 17, 17, 29, 17, 17, 16, 19, 19, 0, 19, 19, 19, 20, 20, 0, 20, 20, 20, 21, 21, 0, 21, 21, 21, 22, 22, 0, 22, 22, 0, 23, 23, 0, 23, 23, 24, 24, 24, 0, 24, 24, 24, 26, 26, 0, 26, 26, 0, 26, 26, 27, 26, 26, 0, 0, 0, 27, 0, 0, 0, 18, 18, 29, 18, 18, 0, 0, 0, 30, 0, 0, 0, 28, 28, 0, 28, 28, 0, 30, 30, 0, 30, 30, 0, 32, 32, 0, 32, 32, 32, 33, 33, 0, 33, 33, 33, 34, 34, 0, 34, 34, 0, 35, 35, 0, 35, 35, 35, 36, 36, 0, 36, 36, 36, 0, 0, 37, 0, 0, 0, 31, 31, 40, 31, 31, 0, 0, 0, 45, 0, 0, 0, 39, 39, 0, 39, 39, 39, 41, 41, 0, 41, 41, 41, 42, 42, 0, 42, 42, 42, 43, 43, 0, 43, 43, 0, 44, 44, 0, 44, 44, 44, 45, 45, 0, 45, 45, 0, 38, 38, 46, 38, 38, 0, 0, 0, 50, 0, 0, 0, 0, 0, 51, 0, 0, 0, 47, 47, 0, 47, 47, 47, 49, 49, 0, 49, 49, 49, 51, 51, 0, 51, 51, 0, 48, 48, 52, 48, 48, 0, 0, 0, 53, 0, 0, 0, 0, 0, 54, 0, 0, 0, 53, 53, 0, 53, 53, 0, 54, 54, 0, 54, 54, 0, 2, 2, 0, 2, 2, 2], 1, 1..2);
constraint oscar_regular(board, 63, 6, [7, 5, 5, 5, 5, 3, 0, 2, 2, 2, 2, 2, 7, 5, 5, 5, 5, 3, 19, 4, 4, 4, 4, 3, 30, 4, 4, 4, 4, 3, 0, 10, 10, 10, 10, 10, 46, 8, 8, 8, 8, 0, 0, 12, 12, 12, 12, 13, 0, 15, 15, 15, 15, 14, 0, 16, 16, 16, 16, 16, 0, 18, 18, 18, 18, 17, 0, 20, 20, 20, 20, 20, 0, 21, 21, 21, 21, 21, 0, 22, 22, 22, 22, 22, 0, 23, 23, 23, 23, 23, 0, 28, 28, 28, 28, 0, 47, 22, 22, 22, 22, 22, 47, 23, 23, 23, 23, 23, 46, 11, 11, 11, 11, 24, 0, 26, 26, 26, 26, 26, 0, 25, 25, 25, 25, 25, 0, 27, 27, 27, 27, 25, 0, 29, 29, 29, 29, 26, 0, 31, 31, 31, 31, 31, 32, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 46, 9, 9, 9, 9, 6, 47, 16, 16, 16, 16, 16, 0, 35, 35, 35, 35, 0, 60, 35, 35, 35, 35, 0, 0, 37, 37, 37, 37, 39, 0, 39, 39, 39, 39, 39, 60, 37, 37, 37, 37, 39, 0, 40, 40, 40, 40, 40, 0, 41, 41, 41, 41, 41, 0, 42, 42, 42, 42, 42, 0, 43, 43, 43, 43, 43, 0, 45, 45, 45, 45, 45, 0, 47, 47, 47, 47, 47, 60, 47, 47, 47, 47, 47, 48, 0, 0, 0, 0, 0, 49, 44, 44, 44, 44, 0, 53, 38, 38, 38, 38, 38, 60, 0, 0, 0, 0, 0, 0, 50, 50, 50, 50, 50, 0, 51, 51, 51, 51, 0, 0, 52, 52, 52, 52, 52, 0, 54, 54, 54, 54, 54, 0, 55, 55, 55, 55, 55, 0, 56, 56, 56, 56, 56, 0, 57, 57, 57, 57, 57, 0, 60, 60, 60, 60, 0, 0, 58, 58, 58, 58, 58, 0, 59, 59, 59, 59, 59, 61, 55, 55, 55, 55, 0, 62, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 62, 62, 62, 62, 0, 0, 63, 63, 63, 63, 0, 0, 2, 2, 2, 2, 2], 1, 1..2);
solve  :: int_search(board, input_order, indomain_min, complete) satisfy;
