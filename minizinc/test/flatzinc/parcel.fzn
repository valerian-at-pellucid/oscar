predicate oscar_circuit(array [int] of var int: x);
array [1..100] of int: distance = [1000, 85, 110, 94, 71, 76, 25, 56, 94, 67, 85, 1000, 26, 70, 62, 60, 63, 62, 70, 49, 110, 26, 1000, 71, 87, 89, 88, 87, 93, 73, 94, 70, 71, 1000, 121, 19, 82, 106, 124, 105, 71, 62, 87, 121, 1000, 104, 53, 24, 8, 13, 76, 60, 89, 19, 104, 1000, 65, 89, 108, 93, 25, 63, 88, 82, 53, 65, 1000, 30, 57, 46, 56, 62, 87, 106, 24, 89, 30, 1000, 23, 20, 94, 70, 93, 124, 8, 108, 57, 23, 1000, 20, 67, 49, 73, 105, 13, 93, 46, 20, 20, 1000];
array [1..10] of int: load_parcel = [0, 1, 5, -6, 4, 3, -5, 2, 1, -3];
var 11..20: INT____00021 :: is_defined_var :: var_is_introduced;
var 21..30: INT____00023 :: is_defined_var :: var_is_introduced;
var 31..40: INT____00025 :: is_defined_var :: var_is_introduced;
var 41..50: INT____00027 :: is_defined_var :: var_is_introduced;
var 51..60: INT____00029 :: is_defined_var :: var_is_introduced;
var 61..70: INT____00031 :: is_defined_var :: var_is_introduced;
var 71..80: INT____00033 :: is_defined_var :: var_is_introduced;
var 81..90: INT____00035 :: is_defined_var :: var_is_introduced;
var 91..100: INT____00037 :: is_defined_var :: var_is_introduced;
var 0..10000: INT____00039 :: is_defined_var :: var_is_introduced;
array [1..10] of var 1..10: cities :: output_array([1..10]);
array [1..10] of var 0..1000: costs;
var 8..1000: INT____00038 :: var_is_introduced = costs[10];
var 8..1000: INT____00036 :: var_is_introduced = costs[9];
var 8..1000: INT____00034 :: var_is_introduced = costs[8];
var 8..1000: INT____00032 :: var_is_introduced = costs[7];
var 8..1000: INT____00030 :: var_is_introduced = costs[6];
var 8..1000: INT____00028 :: var_is_introduced = costs[5];
var 8..1000: INT____00026 :: var_is_introduced = costs[4];
var 8..1000: INT____00024 :: var_is_introduced = costs[3];
var 8..1000: INT____00022 :: var_is_introduced = costs[2];
var 8..1000: INT____00020 :: var_is_introduced = costs[1];
array [1..10] of var -6..5: loads;
array [1..10] of var 1..10: ordered_cities;
var 0..10000: tour_length :: output_var = INT____00039;
constraint array_int_element(INT____00021, distance, costs[2]);
constraint array_int_element(INT____00023, distance, costs[3]);
constraint array_int_element(INT____00025, distance, costs[4]);
constraint array_int_element(INT____00027, distance, costs[5]);
constraint array_int_element(INT____00029, distance, costs[6]);
constraint array_int_element(INT____00031, distance, costs[7]);
constraint array_int_element(INT____00033, distance, costs[8]);
constraint array_int_element(INT____00035, distance, costs[9]);
constraint array_int_element(INT____00037, distance, costs[10]);
constraint array_int_element(cities[1], distance, costs[1]);
constraint array_int_element(ordered_cities[1], load_parcel, loads[1]);
constraint array_int_element(ordered_cities[2], load_parcel, loads[2]);
constraint array_int_element(ordered_cities[3], load_parcel, loads[3]);
constraint array_int_element(ordered_cities[4], load_parcel, loads[4]);
constraint array_int_element(ordered_cities[5], load_parcel, loads[5]);
constraint array_int_element(ordered_cities[6], load_parcel, loads[6]);
constraint array_int_element(ordered_cities[7], load_parcel, loads[7]);
constraint array_int_element(ordered_cities[8], load_parcel, loads[8]);
constraint array_int_element(ordered_cities[9], load_parcel, loads[9]);
constraint array_int_element(ordered_cities[10], load_parcel, loads[10]);
constraint array_var_int_element(ordered_cities[1], cities, ordered_cities[2]);
constraint array_var_int_element(ordered_cities[2], cities, ordered_cities[3]);
constraint array_var_int_element(ordered_cities[3], cities, ordered_cities[4]);
constraint array_var_int_element(ordered_cities[4], cities, ordered_cities[5]);
constraint array_var_int_element(ordered_cities[5], cities, ordered_cities[6]);
constraint array_var_int_element(ordered_cities[6], cities, ordered_cities[7]);
constraint array_var_int_element(ordered_cities[7], cities, ordered_cities[8]);
constraint array_var_int_element(ordered_cities[8], cities, ordered_cities[9]);
constraint array_var_int_element(ordered_cities[9], cities, ordered_cities[10]);
constraint int_eq(ordered_cities[1], cities[1]);
constraint int_lin_eq([-1, 1], [INT____00021, cities[2]], -10) :: defines_var(INT____00021) :: domain;
constraint int_lin_eq([-1, 1], [INT____00023, cities[3]], -20) :: defines_var(INT____00023) :: domain;
constraint int_lin_eq([-1, 1], [INT____00025, cities[4]], -30) :: defines_var(INT____00025) :: domain;
constraint int_lin_eq([-1, 1], [INT____00027, cities[5]], -40) :: defines_var(INT____00027) :: domain;
constraint int_lin_eq([-1, 1], [INT____00029, cities[6]], -50) :: defines_var(INT____00029) :: domain;
constraint int_lin_eq([-1, 1], [INT____00031, cities[7]], -60) :: defines_var(INT____00031) :: domain;
constraint int_lin_eq([-1, 1], [INT____00033, cities[8]], -70) :: defines_var(INT____00033) :: domain;
constraint int_lin_eq([-1, 1], [INT____00035, cities[9]], -80) :: defines_var(INT____00035) :: domain;
constraint int_lin_eq([-1, 1], [INT____00037, cities[10]], -90) :: defines_var(INT____00037) :: domain;
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00039, costs[1], costs[2], costs[3], costs[4], costs[5], costs[6], costs[7], costs[8], costs[9], costs[10]], 0) :: defines_var(INT____00039);
constraint int_lin_le([-1], [loads[1]], -1);
constraint int_lin_le([-1, -1], [loads[1], loads[2]], -1);
constraint int_lin_le([-1, -1, -1], [loads[1], loads[2], loads[3]], -1);
constraint int_lin_le([-1, -1, -1, -1], [loads[1], loads[2], loads[3], loads[4]], -1);
constraint int_lin_le([1, 1, 1, 1], [loads[1], loads[2], loads[3], loads[4]], 15);
constraint int_lin_le([-1, -1, -1, -1, -1], [loads[1], loads[2], loads[3], loads[4], loads[5]], -1);
constraint int_lin_le([1, 1, 1, 1, 1], [loads[1], loads[2], loads[3], loads[4], loads[5]], 15);
constraint int_lin_le([-1, -1, -1, -1, -1, -1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6]], -1);
constraint int_lin_le([1, 1, 1, 1, 1, 1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6]], 15);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6], loads[7]], -1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6], loads[7]], 15);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6], loads[7], loads[8]], -1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6], loads[7], loads[8]], 15);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6], loads[7], loads[8], loads[9]], -1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6], loads[7], loads[8], loads[9]], 15);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6], loads[7], loads[8], loads[9], loads[10]], -1);
constraint int_lin_le([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [loads[1], loads[2], loads[3], loads[4], loads[5], loads[6], loads[7], loads[8], loads[9], loads[10]], 15);
constraint oscar_circuit(cities);
solve  :: int_search(cities, input_order, indomain_min, complete) minimize INT____00039;
